# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
priority -50

extends javascript

snippet int "interface"
interface ${1} {
}
endsnippet

snippet navProps "Navigation Props v6" b
type NavProps = StackScreenProps<${1}, Screens.${2}>;

export interface OuterProps {
  navigation: NavProps["navigation"];
  route: NavProps["route"];
}

endsnippet

snippet withFocusEffect "useFocusEffect in a hoc" b
  withHook((props: Props) => {
    useFocusEffect(
      useCallback(() => {
			${1}
      }, []),
    );
    return {};
  }),
endsnippet

snippet withFocusEffectInteraction "useFocusEffect with interaction" b
  withHook((props: Props) => {
    useFocusEffect(
      useCallback(() => {
        const task = InteractionManager.runAfterInteractions(async () => {
				${1}
        });

        return () => {
					${2}
          task.cancel();
        };
      }, []),
    );
    return {};
  }),

endsnippet

snippet useNav "useNavigation with types" b
const { navigate, pop } = useNavigation<StackNavigationProp<${1}>>();
endsnippet
